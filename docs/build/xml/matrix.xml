<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.16 -->
<document source="C:\Users\penci\OneDrive\Desktop\LibPyMath\LibPyMath\docs\source\matrix.rst">
    <section ids="libpymath-matrix-module-documentation" names="libpymath\ matrix\ module\ documentation">
        <title>Libpymath Matrix Module Documentation</title>
        <paragraph>Libpymath’s matrix library is a fast and powerful means of accessing complex mathematical routines through a simple to use interface. The matrix library is also expanding rapidly, with new features being added with nearly every major version of libpymath.</paragraph>
        <paragraph>When you import the module for the first time, some tests will be run to detect the optimal number of threads to use for certain matrix calculations. It only takes a few seconds and results in the library being even faster!</paragraph>
        <section ids="importing-the-module" names="importing\ the\ module">
            <title>Importing the Module</title>
            <paragraph>To use the matrix module, you can import it like this:</paragraph>
            <literal_block force="False" language="default" linenos="False" xml:space="preserve"># Explicitly import the module
from libpymath import matrix
x = matrix.Matrix(2, 2)

# Use the module through a &lt;libpymath&gt; import
import libpymath as lpm
x = lpm.matrix.Matrix(2, 2)</literal_block>
            <target ids="module-libpymath.matrix.matrix" ismod="True"></target>
            <index entries="['pair',\ 'module;\ libpymath.matrix.matrix',\ 'module-libpymath.matrix.matrix',\ '',\ None]"></index>
            <paragraph>Copyright 2020 Toby Davis</paragraph>
            <paragraph>Permission is hereby granted, free of charge, to any person obtaining a copy of
                this software and associated documentation files (the “Software”), to deal in
                the Software without restriction, including without limitation the rights to
                use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
                of the Software, and to permit persons to whom the Software is furnished to do
                so, subject to the following conditions:</paragraph>
            <paragraph>The above copyright notice and this permission notice shall be included in all
                copies or substantial portions of the Software.</paragraph>
            <paragraph>THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
                FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
                COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
                IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
                CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</paragraph>
        </section>
        <section ids="creating-a-matrix" names="creating\ a\ matrix">
            <title>Creating a Matrix</title>
            <paragraph>As you have seen in the section above, creating a matrix is extremely easy, though there are many different ways of doing this.</paragraph>
            <paragraph>The easiest way to create a matrix is simply to give the rows and columns like this:</paragraph>
            <literal_block force="False" language="default" linenos="False" xml:space="preserve">import libpymath as lpm

# Create a 2x3 matrix
x = lpm.matrix.Matrix(2, 3)</literal_block>
            <paragraph>Matrices can also be created by providing a 2-dimensional Python list of data:</paragraph>
            <literal_block force="False" language="default" linenos="False" xml:space="preserve">import libpymath as lpm

# The data for the matrix
# data = [[1, 2, 3],
#         [4, 5, 6]]
x = lpm.matrix.Matrix(data)</literal_block>
            <paragraph>If a 1-dimensional list is provided, libpymath will assume it is a 1xC matrix, where C is the length of the list provided:</paragraph>
            <literal_block force="False" language="default" linenos="False" xml:space="preserve">import libpymath as lpm

x = lpm.matrix.Matrix([1, 2, 3])</literal_block>
            <paragraph>A matrix can be created from a combination of all of this as well. For example, you can create a matrix with specified rows and columns from a 1-dimensional list of data:</paragraph>
            <literal_block force="False" language="default" linenos="False" xml:space="preserve">import libpymath as lpm

# Create a 2x3 matrix containing:
# [[1, 2, 3],
#  [4, 5, 6]]
x = lpm.matrix.Matrix(rows=2, cols=3, data=[1, 2, 3, 4, 5, 6])</literal_block>
        </section>
        <section ids="printing-a-matrix" names="printing\ a\ matrix">
            <title>Printing a Matrix</title>
            <paragraph>Storing a matrix is useful, though being able to visualise it neatly and effectively is even more useful. Lucklily, libpymath does both. Printing a matrix is as easy as <literal>print(mymatrix)</literal>, with all the formatting and data processing done in the background.</paragraph>
            <paragraph>For example, printing a 3x5 matrix would look like this:</paragraph>
            <literal_block force="False" language="default" linenos="False" xml:space="preserve">import libpymath as lpm

data = [[1, 2.718, 3.14159],
        [4, 5, 6.66],
        [7, 8.5, 9],
        [10, 11.1, 12.345],
        [13, 14, 15]]
x = lpm.matrix.Matrix(data)
print(x)

# Outputs:
# [[ 1.0 ,  2.718,  3.14159,  4.0,  5.0]
#  [ 6.66,  7.0  ,  8.5    ,  9.0, 10.0]
#  [11.1 , 12.345, 13.0    , 14.0, 15.0]]</literal_block>
            <paragraph>Notice how all of the decimal points are aligned, as well as the columns of the matrix? This is to make it easier to understand the data in the matrix and improves its readability.</paragraph>
            <paragraph>A common issue is that printing a matrix results in it wrapping onto multiple lines, ruining its appearence, however libpymath concatentes matrices over a certain size so that all of the data can fit onto the screen. For example, here is a 1000x1000 matrix:</paragraph>
            <literal_block force="False" language="default" linenos="False" xml:space="preserve">import libpymath as lpm

# Create a 1000x1000 matrix
x = lpm.matrix.Matrix(1000, 1000)
print(x)

# This outputs the following*:
# [[0.0, 0.0, 0.0  ***  0.0, 0.0, 0.0]
#  [0.0, 0.0, 0.0  ***  0.0, 0.0, 0.0]
#  [0.0, 0.0, 0.0  ***  0.0, 0.0, 0.0]
#   ***  ***  ***       ***  ***  ***
#  [0.0, 0.0, 0.0  ***  0.0, 0.0, 0.0]
#  [0.0, 0.0, 0.0  ***  0.0, 0.0, 0.0]
#  [0.0, 0.0, 0.0  ***  0.0, 0.0, 0.0]]

# Note that creating a matrix without
# specified data may lead to some values
# being non-zero, or even NaN in some
# cases. This can be mitigated with the
# Matrix.fillScalar(x) function</literal_block>
        </section>
    </section>
</document>
